/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/Models/clownFish.gltf -t -r- public 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {Euler, Group, Vector3} from "three";

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.SkinnedMesh
    Cube001_1: THREE.SkinnedMesh
    Cube001_2: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: {
    Body: THREE.MeshStandardMaterial
    Stripes: THREE.MeshStandardMaterial
    Outline: THREE.MeshStandardMaterial
  }
}

type FishProps = JSX.IntrinsicElements['group'] & {
  pushRef?: (ref: Group) => void,
  velocity?: Vector3,
  position?: Vector3,
  acc?: Vector3,
}

const ClownFish = (props: FishProps) => {
  const { nodes, materials } = useGLTF('/Models/clownFish.gltf') as GLTFResult
  const initRotation = new Euler( 0, Math.PI/2, Math.PI/2, 'ZYX' )

  return (
    <group {...props}
           name={props.name}
           ref={(ref)=>{
             if(ref && props.pushRef){
               props.pushRef(ref)
             }
           }}
    >
      <group rotation={initRotation}>
        <primitive object={nodes.Root} />
        <skinnedMesh name="Cube001" geometry={nodes.Cube001.geometry} material={materials.Body} skeleton={nodes.Cube001.skeleton} />
        <skinnedMesh name="Cube001_1" geometry={nodes.Cube001_1.geometry} material={materials.Stripes} skeleton={nodes.Cube001_1.skeleton} />
        <skinnedMesh name="Cube001_2" geometry={nodes.Cube001_2.geometry} material={materials.Outline} skeleton={nodes.Cube001_2.skeleton} />
      </group>
    </group>
  )
}

useGLTF.preload('/Models/clownFish.gltf')
export default ClownFish